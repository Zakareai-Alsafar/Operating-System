#include <unistd.h>
#include <sys/types.h>
#include <errno.h>
#include <stdio.h>
#include <sys/wait.h>
#include <stdlib.h>


int main(void)
{
    pid_t ReturnValue;   // Variable to Return frok Function. Note: sometime return value Without 32bit
    printf("The Main ID is : %d\n",(int) getpid()); // to print Process ID
    
    ReturnValue = fork();
    
    if(ReturnValue < 0)
    {
        //frok is Faild
        printf("We Have External Error : Sometime Don't have Space Memory\n");
    }
    else if (ReturnValue == 0)
    {
        //Child Process
        printf("\nNow We in Child Process\n");
        printf("The Child Process ID is : %d\n",(int) getpid()); // to print Child Process ID
        char * args[] = {"./ExternalFile.c",NULL}; // Pointer To External File
        execv(args[0] , args);  //int execv(const char *path, char *const argv[]);  To Run External File 
        printf ("Coming Back To Child Process \n");
    }
    else    // ReturnValue > 0
    {
        //Parent Process
        for(int i=0;i<1000000;i++);
        printf("\nNow We in Parent Process\n");
        printf("The Child Process ID is : %d\n",(int) getpid()); // to print Parent Process ID
    }
}
